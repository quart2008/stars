HA$PBExportHeader$m_case_log.srm
forward
global type m_case_log from menu
end type
type m_menu from menu within m_case_log
end type
type m_windowoperations from menu within m_menu
end type
type m_appendfilter from menu within m_windowoperations
end type
type m_createfilter from menu within m_windowoperations
end type
type m_- from menu within m_windowoperations
end type
type m_codedecode from menu within m_windowoperations
end type
type m_sortrank from menu within m_windowoperations
end type
type m_-1 from menu within m_windowoperations
end type
type m_displayfilter from menu within m_windowoperations
end type
type m_find from menu within m_windowoperations
end type
type m_-3 from menu within m_windowoperations
end type
type m_align from menu within m_windowoperations
end type
type m_uniquecount from menu within m_windowoperations
end type
type m_windowoperations from menu within m_menu
m_appendfilter m_appendfilter
m_createfilter m_createfilter
m_- m_-
m_codedecode m_codedecode
m_sortrank m_sortrank
m_-1 m_-1
m_displayfilter m_displayfilter
m_find m_find
m_-3 m_-3
m_align m_align
m_uniquecount m_uniquecount
end type
type m_more from menu within m_menu
end type
type m_target from menu within m_more
end type
type m_lead from menu within m_more
end type
type m_notes from menu within m_more
end type
type m_folder from menu within m_more
end type
type m_more from menu within m_menu
m_target m_target
m_lead m_lead
m_notes m_notes
m_folder m_folder
end type
type m_1 from menu within m_menu
end type
type m_createtrack from menu within m_menu
end type
type m_refercase from menu within m_menu
end type
type m_2 from menu within m_menu
end type
type m_help from menu within m_menu
end type
type m_menu from menu within m_case_log
m_windowoperations m_windowoperations
m_more m_more
m_1 m_1
m_createtrack m_createtrack
m_refercase m_refercase
m_2 m_2
m_help m_help
end type
global type m_case_log from menu
m_menu m_menu
end type
end forward

global type m_case_log from menu
m_menu m_menu
end type
global m_case_log m_case_log

type variables
w_case_maint iw_parent
end variables

forward prototypes
public subroutine of_window_operations (string as_operation)
end prototypes

public subroutine of_window_operations (string as_operation);//********************************************************************
// m_case_log.Of_Window_Operations
//
// Args:  Sting as_operation
//
// Returns:  None
//
// Description:  Called by each of the different operations on the menu, 
//					  m_case_log.m_windowoperaitons, which passes
//				     the operation to be performed.  This funciton calls
//				     of_set_window_operation on the parent window and triggers
//					  ue_set_window_operaitons(), also on parent window
//
//**********************************************************************

integer li_rc

iw_parent = This.ParentWindow

iw_parent.of_set_is_operation(as_operation)

if isvalid(iw_parent) then
	iw_parent.event ue_set_window_operations()
end if 
end subroutine

on m_case_log.create
m_case_log=this
call super::create
this.m_menu=create m_menu
this.Item[UpperBound(this.Item)+1]=this.m_menu
end on

on m_case_log.destroy
call super::destroy
destroy(this.m_menu)
end on

type m_menu from menu within m_case_log
m_windowoperations m_windowoperations
m_more m_more
m_1 m_1
m_createtrack m_createtrack
m_refercase m_refercase
m_2 m_2
m_help m_help
end type

on m_menu.create
call super::create
this.text = "m_case_log"
this.m_windowoperations=create m_windowoperations
this.m_more=create m_more
this.m_1=create m_1
this.m_createtrack=create m_createtrack
this.m_refercase=create m_refercase
this.m_2=create m_2
this.m_help=create m_help
this.Item[UpperBound(this.Item)+1]=this.m_windowoperations
this.Item[UpperBound(this.Item)+1]=this.m_more
this.Item[UpperBound(this.Item)+1]=this.m_1
this.Item[UpperBound(this.Item)+1]=this.m_createtrack
this.Item[UpperBound(this.Item)+1]=this.m_refercase
this.Item[UpperBound(this.Item)+1]=this.m_2
this.Item[UpperBound(this.Item)+1]=this.m_help
end on

on m_menu.destroy
call super::destroy
destroy(this.m_windowoperations)
destroy(this.m_more)
destroy(this.m_1)
destroy(this.m_createtrack)
destroy(this.m_refercase)
destroy(this.m_2)
destroy(this.m_help)
end on

type m_windowoperations from menu within m_menu
m_appendfilter m_appendfilter
m_createfilter m_createfilter
m_- m_-
m_codedecode m_codedecode
m_sortrank m_sortrank
m_-1 m_-1
m_displayfilter m_displayfilter
m_find m_find
m_-3 m_-3
m_align m_align
m_uniquecount m_uniquecount
end type

on m_windowoperations.create
call super::create
this.text = "&Window Operations..."
this.m_appendfilter=create m_appendfilter
this.m_createfilter=create m_createfilter
this.m_-=create m_-
this.m_codedecode=create m_codedecode
this.m_sortrank=create m_sortrank
this.m_-1=create m_-1
this.m_displayfilter=create m_displayfilter
this.m_find=create m_find
this.m_-3=create m_-3
this.m_align=create m_align
this.m_uniquecount=create m_uniquecount
this.Item[UpperBound(this.Item)+1]=this.m_appendfilter
this.Item[UpperBound(this.Item)+1]=this.m_createfilter
this.Item[UpperBound(this.Item)+1]=this.m_-
this.Item[UpperBound(this.Item)+1]=this.m_codedecode
this.Item[UpperBound(this.Item)+1]=this.m_sortrank
this.Item[UpperBound(this.Item)+1]=this.m_-1
this.Item[UpperBound(this.Item)+1]=this.m_displayfilter
this.Item[UpperBound(this.Item)+1]=this.m_find
this.Item[UpperBound(this.Item)+1]=this.m_-3
this.Item[UpperBound(this.Item)+1]=this.m_align
this.Item[UpperBound(this.Item)+1]=this.m_uniquecount
end on

on m_windowoperations.destroy
call super::destroy
destroy(this.m_appendfilter)
destroy(this.m_createfilter)
destroy(this.m_-)
destroy(this.m_codedecode)
destroy(this.m_sortrank)
destroy(this.m_-1)
destroy(this.m_displayfilter)
destroy(this.m_find)
destroy(this.m_-3)
destroy(this.m_align)
destroy(this.m_uniquecount)
end on

type m_appendfilter from menu within m_windowoperations
end type

on m_appendfilter.create
call super::create
this.text = "&Append Filter"
end on

on m_appendfilter.destroy
call super::destroy
end on

event clicked;SetPointer(HourGlass!)
SetMicroHelp(w_main, 'Ready to Append Column Filter.  Doubleclick Column Header to Begin')


m_case_log.of_window_operations('Append Col Filter')
end event

type m_createfilter from menu within m_windowoperations
end type

on m_createfilter.create
call super::create
this.text = "&Create  Filter"
end on

on m_createfilter.destroy
call super::destroy
end on

event clicked;SetPointer(HourGlass!)
SetMicroHelp(w_main, 'Ready to Create Filter.  Double-click Column Header to Begin')


m_case_log.of_window_operations('Create Col Filter')
end event

type m_- from menu within m_windowoperations
end type

on m_-.create
call super::create
this.text = "-"
end on

on m_-.destroy
call super::destroy
end on

type m_codedecode from menu within m_windowoperations
end type

on m_codedecode.create
call super::create
this.text = "C&ode/Decode"
end on

on m_codedecode.destroy
call super::destroy
end on

event clicked;SetPointer(HourGlass!)
SetMicroHelp(w_main, 'Ready to Code/Decode.  Double-click Column Header to Begin')


m_case_log.of_window_operations('Code/Decode')
end event

type m_sortrank from menu within m_windowoperations
end type

on m_sortrank.create
call super::create
this.text = "Sort/Rank"
end on

on m_sortrank.destroy
call super::destroy
end on

event clicked;SetPointer(HourGlass!)

m_case_log.of_window_operations('Sort/Rank')
end event

type m_-1 from menu within m_windowoperations
end type

on m_-1.create
call super::create
this.text = "-"
end on

on m_-1.destroy
call super::destroy
end on

type m_displayfilter from menu within m_windowoperations
end type

on m_displayfilter.create
call super::create
this.text = "&Display Filter"
end on

on m_displayfilter.destroy
call super::destroy
end on

event clicked;SetPointer(HourGlass!)
SetMicroHelp(w_main, 'Ready to Display Filter.  Doubleclick Column Header to Begin')


m_case_log.of_window_operations('Display Filter')
end event

type m_find from menu within m_windowoperations
end type

on m_find.create
call super::create
this.text = "&Find"
end on

on m_find.destroy
call super::destroy
end on

event clicked;SetPointer(HourGlass!)

m_case_log.of_window_operations('Find')
end event

type m_-3 from menu within m_windowoperations
end type

on m_-3.create
call super::create
this.text = "-"
end on

on m_-3.destroy
call super::destroy
end on

type m_align from menu within m_windowoperations
end type

on m_align.create
call super::create
this.text = "&Align"
end on

on m_align.destroy
call super::destroy
end on

event clicked;SetPointer(HourGlass!)
SetMicroHelp(w_main, 'Ready to Align Columns. Double-click Column Header to Begin')


m_case_log.of_window_operations('Align')
end event

type m_uniquecount from menu within m_windowoperations
end type

event clicked;////////////////////////////////////////////////////////////////////////////
//
//	05/11/04	GaryR	Track 4016d	Add a Unique Count option to Window Operations
//	12/15/04	GaryR	Track	4161d	Rename Unique Count to Count Unique Values
//
////////////////////////////////////////////////////////////////////////////

SetPointer(HourGlass!)
w_main.SetMicroHelp('Double-click column header to obtain unique value count')

m_case_log.of_window_operations('Count Unique Values')
end event

on m_uniquecount.create
call super::create
this.text = "Count &Unique Values"
this.microhelp = "Count unique values"
end on

on m_uniquecount.destroy
call super::destroy
end on

type m_more from menu within m_menu
m_target m_target
m_lead m_lead
m_notes m_notes
m_folder m_folder
end type

on m_more.create
call super::create
this.text = "&More ..."
this.m_target=create m_target
this.m_lead=create m_lead
this.m_notes=create m_notes
this.m_folder=create m_folder
this.Item[UpperBound(this.Item)+1]=this.m_target
this.Item[UpperBound(this.Item)+1]=this.m_lead
this.Item[UpperBound(this.Item)+1]=this.m_notes
this.Item[UpperBound(this.Item)+1]=this.m_folder
end on

on m_more.destroy
call super::destroy
destroy(this.m_target)
destroy(this.m_lead)
destroy(this.m_notes)
destroy(this.m_folder)
end on

type m_target from menu within m_more
end type

event clicked;iw_parent = this.ParentWindow

If IsValid(iw_parent) Then
	iw_parent.wf_target()
End If
end event

on m_target.create
call super::create
this.text = "Target"
this.microhelp = "View targets for this case."
end on

on m_target.destroy
call super::destroy
end on

type m_lead from menu within m_more
end type

event clicked;iw_parent = this.ParentWindow

If IsValid(iw_parent) Then
	iw_parent.wf_contact()
End If
end event

on m_lead.create
call super::create
this.text = "Lead"
this.microhelp = "View or add lead to case."
end on

on m_lead.destroy
call super::destroy
end on

type m_notes from menu within m_more
end type

event clicked;iw_parent = this.ParentWindow

If IsValid(iw_parent) Then
	//iw_parent.wf_notes()
	iw_parent.event ue_notes()
End If
end event

on m_notes.create
call super::create
this.text = "Notes"
this.microhelp = "View or add notes to case."
end on

on m_notes.destroy
call super::destroy
end on

type m_folder from menu within m_more
end type

event clicked;iw_parent = this.ParentWindow

If IsValid(iw_parent) Then
	iw_parent.wf_folder()
End If
end event

on m_folder.create
call super::create
this.text = "Folder"
this.microhelp = "Open case folder."
end on

on m_folder.destroy
call super::destroy
end on

type m_1 from menu within m_menu
end type

on m_1.create
call super::create
this.text = "-"
end on

on m_1.destroy
call super::destroy
end on

type m_createtrack from menu within m_menu
end type

event clicked;//iw_parent = this.ParentWindow
//
//If IsValid(iw_parent) Then
//	iw_parent.event ue_tracking()
//End If

SetPointer(HourGlass!)
iw_parent = this.ParentWindow

If IsValid(iw_parent) Then
	fx_m_maintaintarget()
End If
end event

on m_createtrack.create
call super::create
this.text = "Create &Track"
this.microhelp = "Create new track(s) for this case."
end on

on m_createtrack.destroy
call super::destroy
end on

type m_refercase from menu within m_menu
end type

event clicked;iw_parent = this.ParentWindow

If IsValid(iw_parent) Then
	iw_parent.event ue_refer_case()
End If
end event

on m_refercase.create
call super::create
this.text = "&Refer Case"
this.microhelp = "Refer this case to another department."
end on

on m_refercase.destroy
call super::destroy
end on

type m_2 from menu within m_menu
end type

on m_2.create
call super::create
this.text = "-"
end on

on m_2.destroy
call super::destroy
end on

type m_help from menu within m_menu
end type

event clicked;SetPointer(HourGlass!)

iw_parent = this.parentwindow

If IsValid(iw_parent) Then
	iw_parent.of_help ('W_CASE_MAINT','TABPAGE_LOG')
End If

end event

on m_help.create
call super::create
this.text = "&Help"
this.microhelp = "Display help for this tab."
end on

on m_help.destroy
call super::destroy
end on

