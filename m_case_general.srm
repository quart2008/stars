HA$PBExportHeader$m_case_general.srm
forward
global type m_case_general from menu
end type
type m_menu from menu within m_case_general
end type
type m_create from menu within m_menu
end type
type m_update from menu within m_menu
end type
type m_clear from menu within m_menu
end type
type m_delete from menu within m_menu
end type
type m_1 from menu within m_menu
end type
type m_copy from menu within m_menu
end type
type m_retrieve from menu within m_menu
end type
type m_2 from menu within m_menu
end type
type m_more from menu within m_menu
end type
type m_target from menu within m_more
end type
type m_lead from menu within m_more
end type
type m_notes from menu within m_more
end type
type m_folder from menu within m_more
end type
type m_more from menu within m_menu
m_target m_target
m_lead m_lead
m_notes m_notes
m_folder m_folder
end type
type m_3 from menu within m_menu
end type
type m_createtrack from menu within m_menu
end type
type m_refercase from menu within m_menu
end type
type m_4 from menu within m_menu
end type
type m_exportcase from menu within m_menu
end type
type m_- from menu within m_menu
end type
type m_help from menu within m_menu
end type
type m_menu from menu within m_case_general
m_create m_create
m_update m_update
m_clear m_clear
m_delete m_delete
m_1 m_1
m_copy m_copy
m_retrieve m_retrieve
m_2 m_2
m_more m_more
m_3 m_3
m_createtrack m_createtrack
m_refercase m_refercase
m_4 m_4
m_exportcase m_exportcase
m_- m_-
m_help m_help
end type
global type m_case_general from menu
m_menu m_menu
end type
end forward

global type m_case_general from menu
m_menu m_menu
end type
global m_case_general m_case_general

type variables
w_case_maint iw_parent
end variables

on m_case_general.create
m_case_general=this
call super::create
this.m_menu=create m_menu
this.Item[UpperBound(this.Item)+1]=this.m_menu
end on

on m_case_general.destroy
call super::destroy
destroy(this.m_menu)
end on

type m_menu from menu within m_case_general
m_create m_create
m_update m_update
m_clear m_clear
m_delete m_delete
m_1 m_1
m_copy m_copy
m_retrieve m_retrieve
m_2 m_2
m_more m_more
m_3 m_3
m_createtrack m_createtrack
m_refercase m_refercase
m_4 m_4
m_exportcase m_exportcase
m_- m_-
m_help m_help
end type

on m_menu.create
call super::create
this.text = "m_case_general"
this.m_create=create m_create
this.m_update=create m_update
this.m_clear=create m_clear
this.m_delete=create m_delete
this.m_1=create m_1
this.m_copy=create m_copy
this.m_retrieve=create m_retrieve
this.m_2=create m_2
this.m_more=create m_more
this.m_3=create m_3
this.m_createtrack=create m_createtrack
this.m_refercase=create m_refercase
this.m_4=create m_4
this.m_exportcase=create m_exportcase
this.m_-=create m_-
this.m_help=create m_help
this.Item[UpperBound(this.Item)+1]=this.m_create
this.Item[UpperBound(this.Item)+1]=this.m_update
this.Item[UpperBound(this.Item)+1]=this.m_clear
this.Item[UpperBound(this.Item)+1]=this.m_delete
this.Item[UpperBound(this.Item)+1]=this.m_1
this.Item[UpperBound(this.Item)+1]=this.m_copy
this.Item[UpperBound(this.Item)+1]=this.m_retrieve
this.Item[UpperBound(this.Item)+1]=this.m_2
this.Item[UpperBound(this.Item)+1]=this.m_more
this.Item[UpperBound(this.Item)+1]=this.m_3
this.Item[UpperBound(this.Item)+1]=this.m_createtrack
this.Item[UpperBound(this.Item)+1]=this.m_refercase
this.Item[UpperBound(this.Item)+1]=this.m_4
this.Item[UpperBound(this.Item)+1]=this.m_exportcase
this.Item[UpperBound(this.Item)+1]=this.m_-
this.Item[UpperBound(this.Item)+1]=this.m_help
end on

on m_menu.destroy
call super::destroy
destroy(this.m_create)
destroy(this.m_update)
destroy(this.m_clear)
destroy(this.m_delete)
destroy(this.m_1)
destroy(this.m_copy)
destroy(this.m_retrieve)
destroy(this.m_2)
destroy(this.m_more)
destroy(this.m_3)
destroy(this.m_createtrack)
destroy(this.m_refercase)
destroy(this.m_4)
destroy(this.m_exportcase)
destroy(this.m_-)
destroy(this.m_help)
end on

type m_create from menu within m_menu
end type

on m_create.create
call super::create
this.text = "&Create"
this.microhelp = "Create a new case."
end on

event clicked;iw_parent = this.ParentWindow

If IsValid(iw_parent) Then
	iw_parent.event ue_save()
End If
end event

on m_create.destroy
call super::destroy
end on

type m_update from menu within m_menu
end type

on m_update.create
call super::create
this.text = "&Update"
this.microhelp = "Update this case."
end on

event clicked;iw_parent = this.ParentWindow

If IsValid(iw_parent) Then
	iw_parent.event ue_save()
End If
end event

on m_update.destroy
call super::destroy
end on

type m_clear from menu within m_menu
end type

on m_clear.create
call super::create
this.text = "C&lear "
this.microhelp = "Clear case info and re-initialize window."
end on

event clicked;iw_parent = this.ParentWindow

If IsValid(iw_parent) Then
	iw_parent.event ue_clear_case()
End If
end event

on m_clear.destroy
call super::destroy
end on

type m_delete from menu within m_menu
end type

on m_delete.create
call super::create
this.text = "&Delete Case"
this.microhelp = "Delete this case."
end on

event clicked;iw_parent = this.ParentWindow

If IsValid(iw_parent) Then
	iw_parent.event ue_delete_case()
End If
end event

on m_delete.destroy
call super::destroy
end on

type m_1 from menu within m_menu
end type

on m_1.create
call super::create
this.text = "-"
end on

on m_1.destroy
call super::destroy
end on

type m_copy from menu within m_menu
end type

on m_copy.create
call super::create
this.text = "C&opy Case"
this.microhelp = "Copy present case information for a new case."
end on

event clicked;iw_parent = this.ParentWindow

If IsValid(iw_parent) Then
	iw_parent.event ue_copy_case()
End If
end event

on m_copy.destroy
call super::destroy
end on

type m_retrieve from menu within m_menu
end type

on m_retrieve.create
call super::create
this.text = "&Retrieve"
this.microhelp = "Retrieve case associated with case_id + spl + ver"
end on

event clicked;iw_parent = this.parentWindow
IF IsValid(iw_parent) then
	iw_parent.in_from = 'M'
	iw_parent.event ue_retrieve()
END IF
end event

on m_retrieve.destroy
call super::destroy
end on

type m_2 from menu within m_menu
end type

on m_2.create
call super::create
this.text = "-"
end on

on m_2.destroy
call super::destroy
end on

type m_more from menu within m_menu
m_target m_target
m_lead m_lead
m_notes m_notes
m_folder m_folder
end type

on m_more.create
call super::create
this.text = "&More ..."
this.m_target=create m_target
this.m_lead=create m_lead
this.m_notes=create m_notes
this.m_folder=create m_folder
this.Item[UpperBound(this.Item)+1]=this.m_target
this.Item[UpperBound(this.Item)+1]=this.m_lead
this.Item[UpperBound(this.Item)+1]=this.m_notes
this.Item[UpperBound(this.Item)+1]=this.m_folder
end on

on m_more.destroy
call super::destroy
destroy(this.m_target)
destroy(this.m_lead)
destroy(this.m_notes)
destroy(this.m_folder)
end on

type m_target from menu within m_more
end type

event clicked;iw_parent = this.ParentWindow

If IsValid(iw_parent) Then
	iw_parent.wf_target()
End If
end event

on m_target.create
call super::create
this.text = "Target"
this.microhelp = "View targets for this case."
end on

on m_target.destroy
call super::destroy
end on

type m_lead from menu within m_more
end type

event clicked;iw_parent = this.ParentWindow

If IsValid(iw_parent) Then
	iw_parent.wf_contact()
End If
end event

on m_lead.create
call super::create
this.text = "Lead"
this.microhelp = "View or add lead to case."
end on

on m_lead.destroy
call super::destroy
end on

type m_notes from menu within m_more
end type

event clicked;iw_parent = this.ParentWindow

If IsValid(iw_parent) Then
	//iw_parent.wf_notes()
	iw_parent.event ue_notes()
End If
end event

on m_notes.create
call super::create
this.text = "Notes"
this.microhelp = "View or add notes to case"
end on

on m_notes.destroy
call super::destroy
end on

type m_folder from menu within m_more
end type

event clicked;iw_parent = this.ParentWindow

If IsValid(iw_parent) Then
	iw_parent.wf_folder()
End If
end event

on m_folder.create
call super::create
this.text = "Folder"
this.microhelp = "Open case folder."
end on

on m_folder.destroy
call super::destroy
end on

type m_3 from menu within m_menu
end type

on m_3.create
call super::create
this.text = "-"
end on

on m_3.destroy
call super::destroy
end on

type m_createtrack from menu within m_menu
end type

on m_createtrack.create
call super::create
this.text = "Create &Track"
this.microhelp = "Create new track(s) for this case."
end on

event clicked;//iw_parent = this.ParentWindow
//
//If IsValid(iw_parent) Then
//	iw_parent.event ue_tracking()
//End If

SetPointer(HourGlass!)
iw_parent = this.ParentWindow

If IsValid(iw_parent) Then
	fx_m_maintaintarget()
End If

end event

on m_createtrack.destroy
call super::destroy
end on

type m_refercase from menu within m_menu
end type

on m_refercase.create
call super::create
this.text = "&Refer Case"
this.microhelp = "Refer this case to another department."
end on

event clicked;iw_parent = this.ParentWindow

If IsValid(iw_parent) Then
	iw_parent.event ue_refer_case()
End If
end event

on m_refercase.destroy
call super::destroy
end on

type m_4 from menu within m_menu
end type

on m_4.create
call super::create
this.text = "-"
end on

on m_4.destroy
call super::destroy
end on

type m_exportcase from menu within m_menu
end type

event clicked;//	02/22/07	GaryR	Track 4824	Facility to export Attachments and Notes

OpenWithParm( w_case_export, "E" )
end event

on m_exportcase.create
call super::create
this.text = "&Export Notes/Attachments"
this.microhelp = "Export the Case Notes and Attachments"
end on

on m_exportcase.destroy
call super::destroy
end on

type m_- from menu within m_menu
end type

on m_-.create
call super::create
this.text = "-"
end on

on m_-.destroy
call super::destroy
end on

type m_help from menu within m_menu
end type

on m_help.create
call super::create
this.text = "&Help"
this.microhelp = "Display help for this tab."
end on

event clicked;SetPointer(HourGlass!)

iw_parent = this.parentwindow

If IsValid(iw_parent) Then
	iw_parent.of_help ('W_CASE_MAINT','TABPAGE_GENERAL')
End If

end event

on m_help.destroy
call super::destroy
end on

